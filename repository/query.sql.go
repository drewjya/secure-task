// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :exec

INSERT INTO accounts (user_id, user_name) VALUES ($1, $2)
`

type CreateAccountParams struct {
	UserID   uuid.UUID `json:"userId"`
	UserName string    `json:"userName"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.exec(ctx, q.createAccountStmt, createAccount, arg.UserID, arg.UserName)
	return err
}

const createSession = `-- name: CreateSession :exec

INSERT INTO tokens(user_id, session_token) VALUES($1, $2)
`

type CreateSessionParams struct {
	UserID       uuid.UUID `json:"userId"`
	SessionToken string    `json:"sessionToken"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.exec(ctx, q.createSessionStmt, createSession, arg.UserID, arg.SessionToken)
	return err
}

const createUser = `-- name: CreateUser :one

INSERT into
    users (email, name, password)
values ($1, $2, $3) RETURNING id, email, name, password, last_accessed, created_at, updated_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Email, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.LastAccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserId = `-- name: GetAccountByUserId :one

SELECT id, user_id, session_token, created_at, last_accessed_at, expires_at, is_valid FROM tokens WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetAccountByUserId(ctx context.Context, userID uuid.UUID) (Token, error) {
	row := q.queryRow(ctx, q.getAccountByUserIdStmt, getAccountByUserId, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.CreatedAt,
		&i.LastAccessedAt,
		&i.ExpiresAt,
		&i.IsValid,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many

select id, email, name, password, last_accessed, created_at, updated_at from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Password,
			&i.LastAccessed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestSessionWithUserId = `-- name: GetLatestSessionWithUserId :one

SELECT id, user_id, session_token, created_at, last_accessed_at, expires_at, is_valid
FROM tokens
WHERE user_id = $1
ORDER BY expires_at DESC
LIMIT 1
`

func (q *Queries) GetLatestSessionWithUserId(ctx context.Context, userID uuid.UUID) (Token, error) {
	row := q.queryRow(ctx, q.getLatestSessionWithUserIdStmt, getLatestSessionWithUserId, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.CreatedAt,
		&i.LastAccessedAt,
		&i.ExpiresAt,
		&i.IsValid,
	)
	return i, err
}

const getOneUserWithEmail = `-- name: GetOneUserWithEmail :one

select id, email, name, password, last_accessed, created_at, updated_at from users where email = $1 LIMIT 1
`

func (q *Queries) GetOneUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getOneUserWithEmailStmt, getOneUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.LastAccessed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const invalidateTokenAll = `-- name: InvalidateTokenAll :exec

UPDATE tokens SET is_valid = false WHERE user_id = $1
`

func (q *Queries) InvalidateTokenAll(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.invalidateTokenAllStmt, invalidateTokenAll, userID)
	return err
}

const invalidateTokenLatest = `-- name: InvalidateTokenLatest :exec

UPDATE tokens SET is_valid = false WHERE id = $1
`

func (q *Queries) InvalidateTokenLatest(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.invalidateTokenLatestStmt, invalidateTokenLatest, id)
	return err
}

const updateAccount = `-- name: UpdateAccount :one

UPDATE accounts AS a
SET
    user_name = $2,
    picture = $3,
    updated_at = current_timestamp
FROM (
        VALUES (
                $1,
                'new_user_name',
                'new_picture'
            )
    ) AS upd(id, user_name, picture)
WHERE
    a.id = upd.id
    AND (
        a.user_name IS DISTINCT
        FROM
            upd.user_name
            OR a.picture IS DISTINCT
        FROM
            upd.picture
    )
    AND a.id = $1 RETURNING id, user_id, user_name, picture, created_at, updated_at
`

type UpdateAccountParams struct {
	ID       uuid.UUID      `json:"id"`
	UserName string         `json:"userName"`
	Picture  *string `json:"picture"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.updateAccountStmt, updateAccount, arg.ID, arg.UserName, arg.Picture)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.Picture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
