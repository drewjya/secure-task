// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getLatestSessionWithUserIdStmt, err = db.PrepareContext(ctx, getLatestSessionWithUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestSessionWithUserId: %w", err)
	}
	if q.getOneUserWithEmailStmt, err = db.PrepareContext(ctx, getOneUserWithEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneUserWithEmail: %w", err)
	}
	if q.invalidateTokenAllStmt, err = db.PrepareContext(ctx, invalidateTokenAll); err != nil {
		return nil, fmt.Errorf("error preparing query InvalidateTokenAll: %w", err)
	}
	if q.invalidateTokenLatestStmt, err = db.PrepareContext(ctx, invalidateTokenLatest); err != nil {
		return nil, fmt.Errorf("error preparing query InvalidateTokenLatest: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getLatestSessionWithUserIdStmt != nil {
		if cerr := q.getLatestSessionWithUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestSessionWithUserIdStmt: %w", cerr)
		}
	}
	if q.getOneUserWithEmailStmt != nil {
		if cerr := q.getOneUserWithEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneUserWithEmailStmt: %w", cerr)
		}
	}
	if q.invalidateTokenAllStmt != nil {
		if cerr := q.invalidateTokenAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing invalidateTokenAllStmt: %w", cerr)
		}
	}
	if q.invalidateTokenLatestStmt != nil {
		if cerr := q.invalidateTokenLatestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing invalidateTokenLatestStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createSessionStmt              *sql.Stmt
	createUserStmt                 *sql.Stmt
	getAllUsersStmt                *sql.Stmt
	getLatestSessionWithUserIdStmt *sql.Stmt
	getOneUserWithEmailStmt        *sql.Stmt
	invalidateTokenAllStmt         *sql.Stmt
	invalidateTokenLatestStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createSessionStmt:              q.createSessionStmt,
		createUserStmt:                 q.createUserStmt,
		getAllUsersStmt:                q.getAllUsersStmt,
		getLatestSessionWithUserIdStmt: q.getLatestSessionWithUserIdStmt,
		getOneUserWithEmailStmt:        q.getOneUserWithEmailStmt,
		invalidateTokenAllStmt:         q.invalidateTokenAllStmt,
		invalidateTokenLatestStmt:      q.invalidateTokenLatestStmt,
	}
}
